# Example configuration file for BaggyBot. 

# Many configuration options can be left out, 
# in which case their default values will be used.
# For a full overview of all available options, see 
# https://github.com/Baggykiin/BaggyBot-2/blob/master/baggybot/src/Configuration/Configuration.cs
# Note that the properties in these classes are PascalCase, 
# and get converted to hyphenated YAML properties.

# A backend is a storage medium in which BaggyBot can store its statistics.
# Currently, only PostgreSQL databases are supported.
backends:
  - &default
    connection-string: "Host=127.0.0.1;Database=baggybot;Username=baggybot;Password=baggybot;"

# When true, prevents the bot from ignoring non-fatal exceptions.
debug-mode: true
# Maximum number of messages a single message may be broken up into.
flood-limit: 4
# When true, writes some performance data to performance_log.csv
log-performance: false

interpreters:
  # Whether the interactive Python and C# interpreters should be enabled.
  # If set to false, there will not be any way to enable them at runtime.
  enabled: true
  # The security level the interpreters will be set to on startup.
  # Can be either `Block`, `Notify` or `Allow`.
  # `Block` blocks all non-operators from using them.
  # `Notify` allows anyone to use them, but notifies the operators
  # if a non-operator user uses them.
  # `Allow` allows anyone to use them.
  # Please be aware that these values are case-sensitive.
  # Regardless of this setting, no one except bot operators will ever be
  # able to use the interpreters inside query (user-to-user, "PM") channels.
  startup-security-level: Block

# API integrations, used by some of BaggyBot's commands. If you'd like to use
# these APIs, you should generate app IDs for them, and enter them here.
integrations:
  wolfram-alpha:
    app-id: ""

logging:
  log-file: baggybot.log
  # Set to true if you want log messages with the Debug log level to be logged
  # to standard output. Regardless of this setting, debug messages are always
  # logged to the log file.
  show-debug: true

# An identity is a set of credentials BaggyBot uses to connect to an IRC server
identities:
  - &baggybot 
    ident: Dredger
    nick: BaggyBot
    real-name: BaggyBot
    # Set to false if you don't want the bot to set the +i flag on itself.
    # Defaults to true if unspecified.
    hidden: true

# An operator match is a set of rules that will be matched against a user
# in order to determine whether they're allowed to use operator commands.
# If any of these rules fails, the match fails.

# Possible tags are `nick`, `ident`, `host`, and `uid`.
# `nick` and `ident` are matched against a user's IRC nickname and ident.
# `host` is matched against the host/cloak portion of their hostmask.
# `uid` is matched against their User ID in the database.
# The default value for each of these rules is `*`, which matches everything,
# so be sure to specify at least some rules, unless you want everyone to have
# operator rights.
operators:
  - &you
    nick: yourNickname
    ident: ~yourIdent
    host: 127.0.0.1
    uid: 1
  - &your-friend
    nick: friendsNickname
    ident: ~friendsIdent
    host: unafilliated/yourFriend
    uid: 2

# A list of servers BaggyBot should connect to on startup.
# An example configuration for espernet is provided here.
servers:
  - 
    # A unique name used for internal identification
    server-name: espernet
    host: irc.esper.net
    port: 6697

    backend: *default
    identity: *baggybot
    operators: [*you, *your-friend]
    auto-join-channels: ["#baggybot"]
    compat-modes: []

    use-tls: true
    use-unicode: true
    use-nickserv: true
    verify-certificate: true

# Currently not used.
metadata:
  bot-version: 4.1.6
  config-version: 0.1
