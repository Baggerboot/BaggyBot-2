# Example configuration file for BaggyBot. 

# Many configuration options can be left out, 
# in which case their default values will be used.
# For a full overview of all available options, see 
# https://github.com/Baggykiin/BaggyBot-2/blob/master/baggybot/src/Configuration/Configuration.cs
# Note that the properties in these classes are PascalCase, 
# and get converted to hyphenated YAML properties.

# A backend is a storage medium in which BaggyBot can store its statistics.
# Currently, only PostgreSQL databases are supported.
backends:
  - &default
    connection-string: "Host=127.0.0.1;Database=baggybot;Username=baggybot;Password=baggybot;"

# When true, prevents the bot from ignoring non-fatal exceptions.
debug-mode: true
# Maximum number of messages a single message may be broken up into.
flood-limit: 4
# When true, writes some performance data to performance_log.csv
log-performance: false
# A link to the statistics page, printed in the -help command.
stats-page: 'None configured'

interpreters:
  # Whether the interactive Python and C# interpreters should be enabled.
  # If set to false, there will not be any way to enable them at runtime.
  enabled: true
  # The security level the interpreters will be set to on startup.
  # Can be either `Block`, `Notify` or `Allow`.
  # `Block` blocks all non-operators from using them.
  # `Notify` allows anyone to use them, but notifies the operators
  # if a non-operator user uses them.
  # `Allow` allows anyone to use them.
  # Please be aware that these values are case-sensitive.
  # Regardless of this setting, no one except bot operators will ever be
  # able to use the interpreters inside query (user-to-user, "PM") channels.
  startup-security-level: Block

# API integrations, used by some of BaggyBot's commands. If you'd like to use
# these APIs, you should generate app IDs for them, and enter them here.
integrations:
  wolfram-alpha:
    app-id: ""
  bing:
    search:
      key: ""
  imgur:
    client-id: ""

quotes:
  silent-quote-chance: 0.6
  min-delay-hours: 4
  chance: 0.015
  allow-quote-notifications: false

# Administration is done by configuring the bot to perform actions when
# certain events occur.
# A few default events are configured for convenience.
administration:
  # When set to false, disables the entire administration module.
  enabled: false
  # Configure baggybot to react to certain events.
  events:
    - &example
      # A friendly name for the type of events that will be handled.
      name: 'Example'
      # Set to false to disable this handler.
      enabled: false
      # A list of triggers that will trigger this event. Each trigger contains
      # one or more conditions. If all of the conditions in a trigger are 
      # true, the trigger will fire, and an action will be performed.
      triggers:
        -
          # Checks if the message matches a regular expression
          regex:
            expression: 'i want to use regex to parse html'
            case-sensitive: false
          # Requires all other conditions in this trigger to activate
          # a certain amount of times before the trigger fires.
          repetition:
            # Should the repetition count be reset if the trigger fires?
            reset: false
            # The number of repetitions required for the trigger to fire.
            threshold: 2
            # Reduce the repetition count by one at the specified interval.
            tick-down: 10
      # If any of the above triggers fires, BaggyBot will act on it as
      # configured here. The following actions are supported:
      # - Warn: Sends a warning message to the user
      # - Delete: Deletes the offending message
      # - Kick: kicks the offending user
      # - WarnKick: Warns the user that they will be kicked if they continue.
      # - Ban: bans the offending user
      # - WarnBan: Warns the user that they will be banned if the continue.
      actions:
        - [Warn]
      # Defines the contents of warning messages. The $user variable will
      # be substituted by the name of the offending user.
      messages:
        warn: 'Pls ;_;'
    - &profanity
      name: 'profanity'
      enabled: true
      triggers:
        -
          profanity:
            # Uses the internal profanity list to determine whether a word
            # is profanity or not.
            internal-profanity-list: true
            # Additional words that trigger the profanity filter
            words: []
      actions:
        - [Delete, Warn]
        - [Delete, Kick]
      messages:
        warn: '$user, please watch your language.'
    - &allcaps
      name: 'allcaps'
      enabled: true
      triggers:
        -
          # The message should contain at least the given percentage of
          # uppercase characters.
          caps: 80%
          # The message should contain at least this many characters.
          min-characters: 5
      actions:
        - [Delete, Warn]
        - [Delete, Kick]
      messages:
        warn: '$user, please do not abuse the caps lock key.'
    - &spam
      name: 'spam'
      enabled: true
      triggers:
        -
          repetition:
            threshold: 4
            tick-down: 5
        -
          min-characters: 5
          similarity:
            percentage: 80%
      actions:
        - [Delete, Warn]
        - [Delete, Kick]
      messages:
        warn: '$user, please do not spam.'

# The input module allows you to use BaggyBot as a simple commandline chat
# client. As it suppresses console logging, it is disabled by default.
input:
  enabled: false

logging:
  log-file: baggybot.log
  # Set to true if you want log messages with the Debug log level to be logged
  # to standard output. Regardless of this setting, debug messages are always
  # logged to the log file.
  show-debug: true

# An operator match is a set of rules that will be matched against a user
# in order to determine whether they're allowed to use operator commands.
# If any of these rules fails, the match fails.

# Possible tags are `nick`, `unique-id`, and `uid`.
# `nick` is matched against a user's nickname.
# 'unique-id' is matched against a user's unique ID.
# `uid` is matched against their User ID in the database.
# The default value for each of these rules is `*`, which matches everything,
# so be sure to specify at least some rules, unless you want everyone to have
# operator rights (you don't).
operators:
  - &you
    nick: yourNickname
    unique-id: '0089e1b1'
    uid: 1
  - &your-friend
    unique-id: '46c73d56'
    nick: friendsNickname
    uid: 2

# A list of servers BaggyBot should connect to on startup.
# An example configuration for espernet is provided here.
servers:
  - 
    # A unique name used for internal identification
    server-name: espernet
    # The plugin type that should be used to connect to the server.
    # By default, 'irc', 'slack', 'discord' and 'curse' are supported,
    # but more server types can be added by installing plugins. 
    server-type: irc
    # If the plugin requires a username or client ID to connect to the server,
    # this value will be used. Otherwise, it will be ignored.
    username: ''
    # If the plugin requires a password or API token to connect to the server,
    # this value will be used. Otherwise, it will be ignored.
    password: ''
    # The server to connect to, if applicable. Depending on the plugin, this
    # might be a URL, or it might be a domain name.
    server: irc.esper.net
    # The port to connect to, if applicable.
    port: 6697
    # Whether the connection should be secured using TLS/SSL. Mostly relevant
    # for IRC, where plaintext connections are still common. Many plugins may
    # in fact ignore this setting and use TLS regardless.
    use-tls: true

    # The backend (SQL DB) to connect to, as specified above
    backend: *default
    # A list of users with operator privileges
    operators: [*you, *your-friend]
    # A list of administration events BaggyBot should react to
    administration-events: [*example, *profanity, *allcaps, *spam]

    # This section contains plugin-specific settings which will vary depending
    # on the plugin used to connect to the server.
    plugin-settings:
      # The following settings are specific to the IRC plugin.
      # A list of channels that should be joined when a connection has been
      # established.
      auto-join-channels: ["#baggybot"]
      # A set of credentials BaggyBot used to connect to an IRC server
      identity:
        ident: Dredger
        nick: BaggyBot
        real-name: BaggyBot
        # Set to false if you don't want the bot to set the +i flag on itself.
        hidden: true
      # A list of compatibility modes passed to the IRC library, to improve
      # compatibility with non-standard IRC servers.
      compat-modes: [] 
      use-unicode: true
      use-nickserv: true 
# Currently not used.
metadata:
  bot-version: 4.1.6
  config-version: 0.1
