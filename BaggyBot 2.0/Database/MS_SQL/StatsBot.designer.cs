#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BaggyBot.Database.MS_SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="stats_bot")]
	public partial class StatsBotDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertuser_statistic(user_statistic instance);
    partial void Updateuser_statistic(user_statistic instance);
    partial void Deleteuser_statistic(user_statistic instance);
    partial void Insertword(word instance);
    partial void Updateword(word instance);
    partial void Deleteword(word instance);
    partial void Insertemoticon(emoticon instance);
    partial void Updateemoticon(emoticon instance);
    partial void Deleteemoticon(emoticon instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    partial void Insertquote(quote instance);
    partial void Updatequote(quote instance);
    partial void Deletequote(quote instance);
    partial void Insertkey_value_pair(key_value_pair instance);
    partial void Updatekey_value_pair(key_value_pair instance);
    partial void Deletekey_value_pair(key_value_pair instance);
    #endregion
		
		public StatsBotDataContext() : 
				base(global::BaggyBot.Properties.Settings.Default.stats_botConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StatsBotDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StatsBotDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StatsBotDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StatsBotDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<user_statistic> user_statistics
		{
			get
			{
				return this.GetTable<user_statistic>();
			}
		}
		
		public System.Data.Linq.Table<word> words
		{
			get
			{
				return this.GetTable<word>();
			}
		}
		
		public System.Data.Linq.Table<emoticon> emoticons
		{
			get
			{
				return this.GetTable<emoticon>();
			}
		}
		
		public System.Data.Linq.Table<user> users
		{
			get
			{
				return this.GetTable<user>();
			}
		}
		
		public System.Data.Linq.Table<quote> quotes
		{
			get
			{
				return this.GetTable<quote>();
			}
		}
		
		public System.Data.Linq.Table<key_value_pair> key_value_pairs
		{
			get
			{
				return this.GetTable<key_value_pair>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.userstats")]
	public partial class user_statistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private int _lines;
		
		private int _words;
		
		private int _actions;
		
		private int _profanities;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnlinesChanging(int value);
    partial void OnlinesChanged();
    partial void OnwordsChanging(int value);
    partial void OnwordsChanged();
    partial void OnactionsChanging(int value);
    partial void OnactionsChanged();
    partial void OnprofanitiesChanging(int value);
    partial void OnprofanitiesChanged();
    #endregion
		
		public user_statistic()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lines", DbType="Int NOT NULL")]
		public int lines
		{
			get
			{
				return this._lines;
			}
			set
			{
				if ((this._lines != value))
				{
					this.OnlinesChanging(value);
					this.SendPropertyChanging();
					this._lines = value;
					this.SendPropertyChanged("lines");
					this.OnlinesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_words", DbType="Int NOT NULL")]
		public int words
		{
			get
			{
				return this._words;
			}
			set
			{
				if ((this._words != value))
				{
					this.OnwordsChanging(value);
					this.SendPropertyChanging();
					this._words = value;
					this.SendPropertyChanged("words");
					this.OnwordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actions", DbType="Int NOT NULL")]
		public int actions
		{
			get
			{
				return this._actions;
			}
			set
			{
				if ((this._actions != value))
				{
					this.OnactionsChanging(value);
					this.SendPropertyChanging();
					this._actions = value;
					this.SendPropertyChanged("actions");
					this.OnactionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_profanities", DbType="Int NOT NULL")]
		public int profanities
		{
			get
			{
				return this._profanities;
			}
			set
			{
				if ((this._profanities != value))
				{
					this.OnprofanitiesChanging(value);
					this.SendPropertyChanging();
					this._profanities = value;
					this.SendPropertyChanged("profanities");
					this.OnprofanitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_name_user_statistic", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.user_statistics = null;
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.user_statistics = this;
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.words")]
	public partial class word : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _word1;
		
		private int _uses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnusesChanging(int value);
    partial void OnusesChanged();
    #endregion
		
		public word()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="word", Storage="_word1", DbType="NVarChar(220) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._word1;
			}
			set
			{
				if ((this._word1 != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._word1 = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uses", DbType="Int NOT NULL")]
		public int uses
		{
			get
			{
				return this._uses;
			}
			set
			{
				if ((this._uses != value))
				{
					this.OnusesChanging(value);
					this.SendPropertyChanging();
					this._uses = value;
					this.SendPropertyChanged("uses");
					this.OnusesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.emoticons")]
	public partial class emoticon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _emoticon1;
		
		private int _uses;
		
		private int _last_used_by;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OnusesChanging(int value);
    partial void OnusesChanged();
    partial void Onlast_used_byChanging(int value);
    partial void Onlast_used_byChanged();
    #endregion
		
		public emoticon()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="emoticon", Storage="_emoticon1", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._emoticon1;
			}
			set
			{
				if ((this._emoticon1 != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._emoticon1 = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_uses", DbType="Int NOT NULL")]
		public int uses
		{
			get
			{
				return this._uses;
			}
			set
			{
				if ((this._uses != value))
				{
					this.OnusesChanging(value);
					this.SendPropertyChanging();
					this._uses = value;
					this.SendPropertyChanged("uses");
					this.OnusesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_last_used_by", DbType="Int NOT NULL")]
		public int last_used_by
		{
			get
			{
				return this._last_used_by;
			}
			set
			{
				if ((this._last_used_by != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlast_used_byChanging(value);
					this.SendPropertyChanging();
					this._last_used_by = value;
					this.SendPropertyChanged("last_used_by");
					this.Onlast_used_byChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_name_emoticon", Storage="_user", ThisKey="last_used_by", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.emoticons.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.emoticons.Add(this);
						this._last_used_by = value.id;
					}
					else
					{
						this._last_used_by = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.names")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _name1;
		
		private EntityRef<user_statistic> _user_statistics;
		
		private EntitySet<emoticon> _emoticons;
		
		private EntitySet<quote> _quotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public user()
		{
			this._user_statistics = default(EntityRef<user_statistic>);
			this._emoticons = new EntitySet<emoticon>(new Action<emoticon>(this.attach_emoticons), new Action<emoticon>(this.detach_emoticons));
			this._quotes = new EntitySet<quote>(new Action<quote>(this.attach_quotes), new Action<quote>(this.detach_quotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="user_id", Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name1", DbType="NVarChar(90) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name1;
			}
			set
			{
				if ((this._name1 != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name1 = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_name_user_statistic", Storage="_user_statistics", ThisKey="id", OtherKey="user_id", IsUnique=true, IsForeignKey=false)]
		public user_statistic user_statistics
		{
			get
			{
				return this._user_statistics.Entity;
			}
			set
			{
				user_statistic previousValue = this._user_statistics.Entity;
				if (((previousValue != value) 
							|| (this._user_statistics.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user_statistics.Entity = null;
						previousValue.user = null;
					}
					this._user_statistics.Entity = value;
					if ((value != null))
					{
						value.user = this;
					}
					this.SendPropertyChanged("user_statistics");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_name_emoticon", Storage="_emoticons", ThisKey="id", OtherKey="last_used_by")]
		public EntitySet<emoticon> emoticons
		{
			get
			{
				return this._emoticons;
			}
			set
			{
				this._emoticons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_quote", Storage="_quotes", ThisKey="id", OtherKey="user_id")]
		public EntitySet<quote> quotes
		{
			get
			{
				return this._quotes;
			}
			set
			{
				this._quotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_emoticons(emoticon entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_emoticons(emoticon entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_quotes(quote entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_quotes(quote entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.quotes")]
	public partial class quote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private string _quote1;
		
		private EntityRef<user> _user;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public quote()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="quote", Storage="_quote1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._quote1;
			}
			set
			{
				if ((this._quote1 != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._quote1 = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_quote", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.quotes.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.quotes.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[var]")]
	public partial class key_value_pair : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _key;
		
		private int _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(int value);
    partial void OnvalueChanged();
    #endregion
		
		public key_value_pair()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[key]", Storage="_key", DbType="NVarChar(45) NOT NULL", CanBeNull=false)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Int NOT NULL")]
		public int value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
